<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>開発 on Akira Nakada&#39;s Portfolio</title>
    <link>https://tubisuke.github.io/tags/%E9%96%8B%E7%99%BA/</link>
    <description>Recent content in 開発 on Akira Nakada&#39;s Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 24 Nov 2024 18:38:09 +0900</lastBuildDate><atom:link href="https://tubisuke.github.io/tags/%E9%96%8B%E7%99%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>位置情報に基づいた音楽アプリ</title>
      <link>https://tubisuke.github.io/blogs/post03/</link>
      <pubDate>Sun, 24 Nov 2024 18:38:09 +0900</pubDate>
      
      <guid>https://tubisuke.github.io/blogs/post03/</guid>
      <description>※このプロジェクトは，現在進行形のプロジェクトになります．
はじめに 概要 今回作成したのは，位置情報に基づいた音楽アプリです． 動機 海の近くを運転しているときに助手席に乗っている人に言いました． 「海っぽい音楽流して〜」 これ自動でできたら便利じゃね？？（ひらめきの音） そもそも，人が音楽を聴くタイミングというのは，何か他のことに集中している場合が多いです． そのため，音楽を選ぶのが面倒だったり，選ぶ余裕がなかったりします． そこで，その場所の特徴に合わせた音楽を自動で流すアプリを作成することにしました． 加えて，そのタイミングの時間・天気・季節などによっても音楽を変えることができるようにしました． 技術スタック バックエンド Python FastAPI アプリ Swift データ収集 Spotify API OpenWeatherAPI Google Maps API システムの概要 僕は，主にバックエンドの開発を担当しました． そこで，フロント側から送られてきた位置情報をもとに，その場所に合った音楽を選定し，トラックIDを返すAPIを作成しました（予定）． このとき，音楽を選定するための特徴量は以下の通りです（予定）． 周辺施設 時間 天気 季節 移動スピード 移動距離 このAPIを外部から読み出せるようにGCPのCloud Runにデプロイしました． 以下はイメージです． 各種APIから取得したデータをもとに，音楽を選定し，その情報を返すAPIです． まとめ このアプリが完成すれば，音楽レコメンドは画期的なものになると思います． 継続して開発を進めていきたいと思います． </description>
    </item>
    
    <item>
      <title>猫の迷路ゲームの作成</title>
      <link>https://tubisuke.github.io/blogs/post02/</link>
      <pubDate>Fri, 21 Jul 2023 22:15:06 +0900</pubDate>
      
      <guid>https://tubisuke.github.io/blogs/post02/</guid>
      <description>はじめに 今回作成したのは，猫の迷路ゲームです． このゲームは，大学1年時の「プログラミング」という授業の課題で作成したものになります． JavaFXを利用した迷路ゲームのテンプレートが配布され，それを元にグループごとにアレンジを加えて作成するというものでした． 技術スタック Java JavaFX デモ動画 以下に，作成した猫の迷路ゲームのデモ動画を掲載します． 最短経路を表示したり，BGMを流したりなどのオリジナル機能を盛り込みました． 敵を作ったのも僕たちのチームだけのアイデアでした（懐かしい）． 動画を再生するにはvideoタグをサポートしたブラウザが必要です。
まとめ 大学に入って最初のグループワーク（大学1年次）で作成したゲームです．なので，個人的にも色々大変で思い出深い作品です． 全体で評価において2位を獲得したのもいい思い出です． たしか20チームくらいあったと思います． </description>
    </item>
    
    <item>
      <title>キャンパスペイ便利システムの構築</title>
      <link>https://tubisuke.github.io/blogs/post01/</link>
      <pubDate>Mon, 19 Jun 2023 15:42:51 +0900</pubDate>
      
      <guid>https://tubisuke.github.io/blogs/post01/</guid>
      <description>はじめに いつごろ作ったのか 今回作成したのは，大学のキャンパスペイ便利システムです．このシステムは，大学2年時の「応用プログラミングC」の授業で作成したものになります． 目的 目的としては，静岡大学の生協で使用することができる決済カードである「キャンパスペイ」の残高確認や履歴確認を行うためのシステムを作ることです． このシステムを作った当時は，キャンパスペイの残高確認や履歴確認を行うための公式アプリが存在しなかったため，自分で作成することにしました． （なお，現在は便利なアプリが公式から公開されました．．） 技術スタック Python JavaScript IoT（NFC） アイデア このシステムのポイントは，キャンパスペイをキーとしてどれだけ楽に残高確認や履歴確認を行えるかということです． 元々，生協サイトにログインすれば，残高を確認することはできましたが，ログインするのが面倒だったり，そもそもそのサイトを知らない学生も多いという状況でした． そこで，キャンパスペイをかざすだけで残高確認や履歴確認ができるシステムの構築を行うことにしました． システムの概要 システムの利用イメージは以下の通りです． カードリーダーにキャンパスペイをかざし，ログイン情報を保存しておくことで，以降はキャンパスペイをかざすだけで残高確認や履歴確認ができます． 利用イメージ システムの利用イメージは以下の通りです． カードの読み取り カードをかざすだけで，カードの情報を読み取ります． 新規登録の場合は，カード情報とログイン情報を紐づけて保存します． 既存のユーザーの場合は，カード情報からログイン情報を取得して，残高や利用履歴を表示します． 動画を再生するにはvideoタグをサポートしたブラウザが必要です。
利用履歴の確認 動画 動画を再生するにはvideoタグをサポートしたブラウザが必要です。
読み取り画面 読み込みボタンを押すことで，pythonのfelicaカード読み取りプログラムが呼び出され，読み取りが行われます． 新規登録画面 データベースに登録されていないユーザがカードを読み込んだ場合に，新規登録画面に遷移し，idm(カード識別番号)に対応したユーザIDとパスワードを入力します． モード選択画面 残高表示とランキング表示の2つの機能の選択を行います． 残高確認画面 視覚的に残高を表示します. 購入品ランキング画面 1年間の購入品の中で，購入回数が多い上位3品を表示します． </description>
    </item>
    
  </channel>
</rss>
